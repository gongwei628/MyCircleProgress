package com.example.study.android_study;

import android.content.Context;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.PaintFlagsDrawFilter;
import android.util.AttributeSet;
import android.view.MotionEvent;
import android.view.View;

/**
 * Created by Administrator on 2016-11-14.
 */
public class CircleProgress extends View {
    // 1.创建一个画笔
    private Paint mPaint = new Paint();
    // 宽高
    private int mWidth, mHeight, circle_radius;
    private int mMaxNum = 100;
    private int mPosition = 1;
    private int tmpPosition = 0;
    private float mDegrees;
    private int mNoProgressColor = Color.GRAY;
    private int mProgressColor = Color.BLUE;

    public CircleProgress(Context context) {
        super(context);
    }

    public CircleProgress(Context context, AttributeSet attrs) {
        super(context, attrs);
        initPaint();
    }

    public CircleProgress(Context context, AttributeSet attrs, int defStyleAttr) {
        super(context, attrs, defStyleAttr);
    }

    // 2.初始化画笔
    private void initPaint() {
        mDegrees = (float) (320.0 / mMaxNum);
        mPaint.setAntiAlias(true);      //抗锯齿
        mPaint.setDither(true);         //防抖动
        mPaint.setColor(Color.GRAY);       //设置画笔颜色
        mPaint.setStyle(Paint.Style.STROKE);  //设置画笔模式为填充
    }

    @Override
    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
//        super.onMeasure(widthMeasureSpec, heightMeasureSpec);
        setMeasuredDimension(measureWidth(widthMeasureSpec), measureHeight(heightMeasureSpec));
    }

    @Override
    protected void onSizeChanged(int w, int h, int oldw, int oldh) {
        super.onSizeChanged(w, h, oldw, oldh);
        mWidth = w;
        mHeight = h;
        circle_radius = mWidth / 2 - 10;
    }

    /**
     * 获取测量控件宽度
     */
    private int measureWidth(int measureSpec) {
        int result = 0;
        int specMode = MeasureSpec.getMode(measureSpec);
        int specSize = MeasureSpec.getSize(measureSpec);
        if (specMode == MeasureSpec.EXACTLY) {
            result = specSize;
        } else {
            result = 400;
            if (specMode == MeasureSpec.AT_MOST) {
                result = Math.min(result, specSize);
            }
        }
        return result;
    }

    /**
     * 获取测量控件盖度
     */
    private int measureHeight(int measureSpec) {
        int result = 0;
        int specMode = MeasureSpec.getMode(measureSpec);
        int specSize = MeasureSpec.getSize(measureSpec);
        if (specMode == MeasureSpec.EXACTLY) {
            result = specSize;
        } else {
            result = 400;
            if (specMode == MeasureSpec.AT_MOST) {
                result = Math.min(result, specSize);
            }
        }
        return result;
    }

    /**
     * 绘制控件
     */
    @Override
    protected void onDraw(Canvas canvas) {
        super.onDraw(canvas);
        canvas.setDrawFilter(new PaintFlagsDrawFilter(0, Paint.ANTI_ALIAS_FLAG |
                Paint.FILTER_BITMAP_FLAG));
        drawBG(canvas);
        drawCircle(canvas);
        if (tmpPosition < mPosition) {
            tmpPosition++;
            invalidate();
        } else if (tmpPosition > mPosition) {
            tmpPosition--;
            invalidate();
        }
    }

    private void drawBG(Canvas canvas) {
        int pointX = mWidth / 2;
        int pointY = mHeight / 2;
        mPaint.setAntiAlias(true);
        mPaint.setStyle(Paint.Style.FILL_AND_STROKE);  //设置画笔模式为填充
        mPaint.setColor(mNoProgressColor);
        canvas.save();
        canvas.translate(10, pointY);
        canvas.rotate(-70, pointX, 10);
        for (int i = 0; i < mMaxNum; i++) {
            if (i == 0 || i == mMaxNum - 1) {
                mPaint.setStrokeWidth(2);
                canvas.drawLine(10, 0, circle_radius / 4, 0, mPaint);
            } else {
                mPaint.setStrokeWidth(3);
                canvas.drawLine(20, 0, circle_radius / 4, 0, mPaint);
            }
            canvas.rotate(mDegrees, pointX, 0);
        }

        canvas.restore();
        canvas.save();
        mPaint.setColor(mProgressColor);
        Paint textPaint = new Paint();          // 创建画笔
        textPaint.setColor(mProgressColor);        // 设置颜色
        textPaint.setStyle(Paint.Style.FILL);   // 设置样式
        textPaint.setTextSize(80);              // 设置字体大小
        textPaint.setTextAlign(Paint.Align.CENTER);
        textPaint.setAntiAlias(true);
        canvas.drawText(String.valueOf(tmpPosition) + "℃", pointX, pointY + textPaint.getTextSize() / 2, textPaint);
        canvas.translate(10, pointY);
        canvas.rotate(-70, pointX, 10);
        for (int i = 0; i < tmpPosition; i++) {
            if (i == 0 || i == mMaxNum - 1) {
                mPaint.setStrokeWidth(2);
                canvas.drawLine(10, 0, circle_radius / 4, 0, mPaint);
            } else {
                mPaint.setStrokeWidth(3);
                canvas.drawLine(20, 0, circle_radius / 4, 0, mPaint);
            }
            canvas.rotate(mDegrees, pointX, 0);
        }
        canvas.restore();
    }

    /**
     * 绘制跟随小圆点
     */
    private void drawCircle(Canvas canvas) {
        mPaint.setStyle(Paint.Style.FILL);  //设置画笔模式为填充
        int pointX = mWidth / 2;
        int pointY = mHeight / 2;
        canvas.save();
        canvas.translate(10, pointY);
        canvas.rotate(-70, pointX, 10);
        canvas.rotate(mDegrees * (tmpPosition - 1), pointX, 0);
        canvas.drawCircle(circle_radius / 3, 0, 8, mPaint);
    }

    public int getmPosition() {
        return mPosition;
    }

    public void setmPosition(int mPosition) {
        this.mPosition = mPosition;
        invalidate();
    }

    @Override
    public boolean onTouchEvent(MotionEvent event) {
        int pointX = mWidth / 2;
        int pointY = mHeight / 2;
        switch (event.getAction()) {
            case MotionEvent.ACTION_DOWN:
                break;
            case MotionEvent.ACTION_MOVE:
            case MotionEvent.ACTION_UP:
                float eventX = event.getX();
                float eventY = event.getY();
                //点击位置x坐标与圆心的x坐标的距离
                int distanceX = (int) Math.abs(pointX - eventX);
                //点击位置y坐标与圆心的y坐标的距离
                int distanceY = (int) Math.abs(pointY - eventY);
                //点击位置与圆心的直线距离
                int distanceZ = (int) Math.sqrt(Math.pow(distanceX, 2) + Math.pow(distanceY, 2));

                //如果点击位置与圆心的距离大于圆的半径，证明点击位置没有在圆内
//                Log.i("ACTION_UP","X:"+(distanceZ)+"y:"+circle_radius);
                if (distanceZ <= circle_radius && distanceZ >= (circle_radius - circle_radius / 4)) {
//                    Log.i("ACTION_UP","X:true");
                    // 利用三角函数算法   得到点到圆心的连线长和角度
                    int lin = (int) Math
                            .sqrt((eventX - pointX) * (eventX - pointX) + (eventY - pointY) * (eventY - pointY));
                    double B = Math.acos(((pointX - eventX) * (pointX - eventX) + lin * lin - (pointY - eventY)
                            * (pointY - eventY))
                            / (2.0 * (eventX - pointX) * lin));
                    int A = (int) Math.abs(90 - Math.toDegrees(B));// 绝对值
                    int degrees = 0;
                    // 根据当前的x,y与中心点对比确定方位
                    if (eventX <= pointX && eventY > pointY) {
                        degrees = A;
//                        Log.i("ACTION_UP", "左下：" + A);
                    }
                    if (eventX < pointX && eventY <= pointY) {
                        degrees = 180 - A;
//                        Log.i("ACTION_UP", "左上：" + ((90-A)+90));
                    }
                    if (eventX >= pointX && eventY < pointY) {
                        degrees = 180 + A;
//                        Log.i("ACTION_UP", "右上：" + (A+180));
                    }
                    if (eventX > pointX && eventY >= pointY) {
                        degrees = 360 - A;
//                        Log.i("ACTION_UP", "右下：" + (90-A+270));
                    }

                    if (degrees >= 20 && degrees <= 340) {

                        int position = (int) ((degrees - 20) / mDegrees);
                        setmPosition(position + 1 >= 100 ? 100 : position + 1);
//                        Log.i("ACTION_UP", "position：" + position);
                    }
                }
                break;
        }
        return true;
    }
}
